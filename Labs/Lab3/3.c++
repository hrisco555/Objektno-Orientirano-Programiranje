/*
–î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –∫–ª–∞—Å–∞ Employee –≤–æ –∫–æ—ò–∞ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞:

name(–Ω–∏–∑–∞ –æ–¥ –º–∞–∫—Å–∏–º—É–º 100 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏) -–∏–º–µ –Ω–∞ –≤—Ä–∞–±–æ—Ç–µ–Ω–∏–æ—Ç

surname(–Ω–∏–∑–∞ –æ–¥ –º–∞–∫—Å–∏–º—É–º 100 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏) - –ø—Ä–µ–∑–∏–º–µ

salary(—Ü–µ–ª –±—Ä–æ—ò) - –∫–æ–ª–∫—É –º—É –µ –ø–ª–∞—Ç–∞—Ç–∞

–º–µ—Ç–æ–¥–∏ –∫–æ–∏ —à—Ç–æ –∫–ª–∞—Å–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ –≥–∏ –∏–º–∞:

print() 

-–ü—Ä–∏–Ω—Ç–∞ –≤–æ —Ñ–æ—Ä–º–∞—Ç:
Employee name: 

Employee surname: 

Employee salary: 

–î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –∫–ª–∞—Å–∞ TechCompany –≤–æ –∫–æ—ò–∞ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞:

name(–Ω–∏–∑–∞ –æ–¥ –º–∞–∫—Å–∏–º—É–º 100 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏) -–∏–º–µ –Ω–∞ —Ñ–∏—Ä–º–∞—Ç–∞

employees(–Ω–∏–∑–∞ –æ–¥ –≤—Ä–∞–±–æ—Ç–µ–Ω–∏) 

numOfEmployees(—Ü–µ–ª –±—Ä–æ—ò) - –∫–æ–ª–∫—É –≤—Ä–∞–±–æ—Ç–µ–Ω–∏ –∏–º–∞ –≤–æ —Ñ–∏—Ä–º–∞—Ç–∞ 

–º–µ—Ç–æ–¥–∏ –∫–æ–∏ —à—Ç–æ –∫–ª–∞—Å–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ –≥–∏ –∏–º–∞:

print() 

-–ü—Ä–∏–Ω—Ç–∞ –≤–æ —Ñ–æ—Ä–º–∞—Ç:
Tech company name: 

Number of employees: 

 double getAverageOfEmployee—ÅSalary()

-–í—Ä–∞—ú–∞ —Å—Ä–µ–¥–Ω–∞ –≤—Ä–µ–Ω–¥–Ω–æ—Å—Ç –æ–¥ –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–µ–∫–æ—ò –≤—Ä–∞–±–æ—Ç–µ–Ω –≤–æ —Ç–∞–∞ —Ñ–∏—Ä–º–∞


–°–∏—Ç–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –≤–Ω–∞—Ç—Ä–µ –≤–æ –∫–ª–∞—Å–∏—Ç–µ —Ç—Ä–µ–±–∞ –¥–∞ –±–∏–¥–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–∏. –°–æ–æ–¥–≤–µ—Ç–Ω–æ –≤–æ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å–∏—Ç–µ –¥–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–∞—Ç:

–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–±–µ–∑ –∏ —Å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)

–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä

set –º–µ—Ç–æ–¥–∏

get –º–µ—Ç–æ–¥–∏

copy constructor

–§—É–Ω–∫—Ü–∏–∏ –Ω–∞–¥–≤–æ—Ä –æ–¥ –∫–ª–∞—Å–∞—Ç–∞:

printCompanyWithHighestAverageSalary(TechCompany companies[], int numCompanies)

-–ì–æ –≤—Ä–∞—ú–∞ TechCompany –æ–±—ò–µ–∫—Ç–æ—Ç —à—Ç–æ –∏–º–∞ –Ω–∞—ò–≥–æ–ª–µ–º–∞ —Å—Ä–µ–¥–Ω–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç –∑–∞ –ø–ª–∞—Ç–∏ –Ω–∞ –Ω–µ–≥–æ–≤–∏—Ç–µ –≤—Ä–∞–±–æ—Ç–µ–Ω–∏
printCompanyWithHighestStdSalary(TechCompany companies[], int numCompanies)

-–ì–æ –≤—Ä–∞—ú–∞ TechCompany –æ–±—ò–µ–∫—Ç–æ—Ç —à—Ç–æ –∏–º–∞ –Ω–∞—ò–≥–æ–ª–µ–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä–¥–Ω–∞ –¥–µ–≤–∏—ò–∞—Ü–∏—ò–∞ –∑–∞ –ø–ª–∞—Ç–∏ –Ω–∞ –Ω–µ–≥–æ–≤–∏—Ç–µ –≤—Ä–∞–±–æ—Ç–µ–Ω–∏
ùëâùê¥ùëÖ=‚àëùëìùëúùëü ùëíùëéùëê‚Ñé ùê∏ùëöùëùùëôùëúùë¶ùëíùëí ùëí[(ùëí.ùë†ùëéùëôùëéùëüùë¶‚àíùê¥ùëâùê∫)2]ùëõ‚àí1ùëÜùëáùê∑=(‚àöùëâùê¥ùëÖ)

-–ü–æ–º–æ—à: AVG –µ —Å—Ä–µ–¥–Ω–∞—Ç–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç –Ω–∞ –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–∏—Ç–µ –≤—Ä–∞–±–æ—Ç–µ–Ω –≤–æ —Ç–∞–∞ —Ñ–∏—Ä–º–∞, STD –µ —Å—Ç–∞–Ω–¥–∞—Ä–¥–Ω–∞ –¥–µ–≤–∏—ò–∞—Ü–∏—ò–∞, VAR  –µ –ø–æ–º–æ—à–Ω–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞. –ò –ø—Ä–≤–æ –∫–≤–∞–¥—Ä–∏—Ä–∞—ò—Ç–µ –≥–æ –∏–∑—Ä–∞–∑–æ—Ç –ø–∞ –ø–æ—Ç–æ–∞ –¥–æ–¥–∞–¥–µ—Ç–µ –≥–æ –≤–æ —Å—É–º–∞—Ç–∞!
isSameCompany(TechCompany company1, TechCompany company2)

-–í—Ä–∞—ú–∞ boolean –≤—Ä–µ–¥–Ω–æ—Å—Ç: –¥–≤–µ —Ñ–∏—Ä–º–∏ —Å–µ –∏—Å—Ç–∏ –∞–∫–æ –∏–º–∞–∞—Ç –∏—Å—Ç–æ –∏–º–µ. –¢—Ä–µ–±–∞ —Å–∞–º–æ –¥–∞ —Å–µ –ø—Ä–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º –µ –∏—Å—Ç–æ –∏–º–µ—Ç–æ!
–î–ê –ù–ï –°–ï –ú–ï–ù–£–í–ê MAIN –§–£–ù–ö–¶–ò–à–ê–¢–ê.
*/
#include <iostream>
#include <cstring>
#include <cmath>

using namespace std;

class Employee{

private:
    char name[100];
    char surname[100];
    int salary;

public:
    Employee(){
        strcpy(name,"John");
        strcpy(surname,"Doe");
        salary=0;
    }
    Employee(const char *i, const char *p, int s){

            strcpy(name,i);
            strcpy(surname,p);
            salary=s;

//            strcpy(this->name,name);
//            strcpy(this->surname,surname);
//            this->salary=salary;

    }
    Employee(const Employee &e)
    {
        strcpy(name,e.name);
        strcpy(surname,e.surname);
        salary=e.salary;
    }

    ~Employee(){}

//    void setName(const char *i)
//    {
//        strcpy(name,i);
//    }
//    void setSurname(char *p)
//    {
//        strcpy(surname,p);
//    }
//    void setSalary(int s)
//    {
//        salary=s;
//    }

    char *getName(){
        return name;
    }

    char *getSurname(){
        return surname;
    }

    int getSalary()const{
        return salary;
    }

    void printEmployee()
    {
        cout<<"Employee name: "<<name<<endl;
        cout<<"Employee surname: "<<surname<<endl;
        cout<<"Employee salary: "<<salary<<endl;
    }
};

class TechCompany {
private:
    char name[100];
    Employee employees[20];
    int numofEmployees;
public:

    TechCompany() {
        strcpy(name,"david");
        numofEmployees=0;
        for(int i=0;i<numofEmployees;i++){
            employees[i]=Employee();
        }
    }

    TechCompany(char *ime) {
        strcpy(name, ime);
        numofEmployees = 0;
    }

    TechCompany(const TechCompany &comp) //copy konstruktor
    {
        strcpy(name, comp.name);
        numofEmployees = comp.numofEmployees;
        for (int i = 0; i < numofEmployees; ++i) { //for ciklus za niza
            employees[i] = comp.employees[i];
        }
    }

    ~TechCompany() {}


    void setName(const char *ime) {
        strcpy(name, ime);
    }

    void setNumofEmployees(int noe) {
        numofEmployees = noe;
    }

    char *getName() {
        return name;
    }

    const Employee &getEmployee(int index)const{
        return employees[index];
    }

    int getNumEmployees() {
        return numofEmployees;
    }

    void print() {
        cout << "Tech company name: " << name << endl;
        cout << "Number of employees: " << numofEmployees << endl;
    }

    double getAverageOfEmployeesSalary() {
        double suma = 0.0;
        for (int i = 0; i < numofEmployees; ++i) {
            suma += employees[i].getSalary(); //so get deka sme vo druga klasa
        }
        return suma / numofEmployees; //sredna vrednost
    }

    void addEmployee(Employee e)
    {
        if(numofEmployees<20)
        {
            employees[numofEmployees]=e;
            numofEmployees++;
        }
    }


};

TechCompany printCompanyWithHighestAverageSalary(TechCompany companies[], int numCompanies){

    int i,max_i=0;
    float max=0;
    for(i=0;i<numCompanies;i++) {

        if(companies[i].getAverageOfEmployeesSalary()>max){

            max=companies[i].getAverageOfEmployeesSalary();
            max_i=i;
        }
    }
    return companies[max_i];
}


TechCompany printCompanyWithHighestStdSalary(TechCompany companies[], int numCompanies) {
    int max_i;
    double najgolema_plata = 0;

    for (int i = 0; i < numCompanies; i++) {
        int broj_vraboteni = companies[i].getNumEmployees();
        double srp= companies[i].getAverageOfEmployeesSalary();
        double var = 0;

        for (int j = 0; j < broj_vraboteni; j++) {
            double razlika_plata = companies[i].getEmployee(j).getSalary() - srp;
            //var += diff * diff;
            var+=(razlika_plata*razlika_plata);
        }

        double standardSalary = sqrt(var / (broj_vraboteni-1));

        if (standardSalary > najgolema_plata) {
            najgolema_plata = standardSalary;
            max_i = i;
        }
    }

    return companies[max_i];
}

bool isSameCompany(TechCompany comp1, TechCompany comp2){
    return strcmp(comp1.getName(), comp2.getName())==0;
}



int main() {
    const int MAX_COMPANIES = 10;
    const int MAX_EMPLOYEES = 20;

    TechCompany companies[MAX_COMPANIES];

    int n;
    std::cin >> n;

    for (int i = 0; i < n; i++) {
        char name[100];
        std::cin >> name;

        TechCompany company(name);

        int m;
        std::cin >> m;

        for (int j = 0; j < m; j++) {
            char name[100];
            char surname[100];
            int salary;

            std::cin >> name;

            std::cin >> surname;

            std::cin >> salary;

            Employee employee(name, surname, salary);

            company.addEmployee(employee);
        }

        companies[i] = company;
    }

    TechCompany copy = companies[0];

    std::cout<<"-->Testing get and set methods for one object and copy constructor"<<std::endl;
    copy.setName("copy");
    std::cout << copy.getName() << std::endl;


    std::cout<<"-->Testing addEmployee function"<<std::endl;
    Employee newEmployee("John", "Doe", 5000);
    copy.addEmployee(newEmployee);
    std::cout << "Number of employees in copy: " << copy.getNumEmployees() << std::endl;


    std::cout<<"-->Testing copy of first employee"<<std::endl;
    Employee firstEmployee = copy.getEmployee(0);
    firstEmployee.printEmployee();


    std::cout<<"-->Testing methods"<<std::endl;
    TechCompany t = printCompanyWithHighestAverageSalary(companies, n);
    TechCompany t1 = printCompanyWithHighestStdSalary(companies, n);

    std::cout << "Tech company with the highest average salary: " << t.getName() << std::endl;
    std::cout << "Tech company with the highest standard deviation for salaries: " <<t1.getName() << std::endl;

    if (isSameCompany(t, t1)){
        std::cout<<"The tech company: "<<t.getName()<<" has the highest standard deviation and highest average salary"<<std::endl;
    }
    return 0;
}
